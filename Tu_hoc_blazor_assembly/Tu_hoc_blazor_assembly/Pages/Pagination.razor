@using ToDoList_ViewModel;
@using Features;
<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        @foreach (var link in _links)
        {
            <li @onclick="() => OnSelectedPage(link)" style="cursor: pointer;" class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>


@code {
    [Parameter]
    public MetaData MetaData { get; set; }
    [Parameter]
    public int Spread { get; set; }
    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }
    private List<PageLink> _links;
    protected override void OnParametersSet()
    {
        CreatePaginationLink();
    }
    private void CreatePaginationLink()
    {
        _links = new List<PageLink>();
        _links.Add(new PageLink(MetaData.CurrentPage - 1, MetaData.HasPrevious, "Previous"));
        for (int i = 1; i <= MetaData.TotalPages ; i++)
        {
            if(i >= MetaData.CurrentPage - Spread && i <= MetaData.CurrentPage + Spread)
            {
                _links.Add(new PageLink(i, true, i.ToString())
                    {
                        Active = MetaData.CurrentPage == i
                    });
            }
        }
        _links.Add(new PageLink(MetaData.CurrentPage + 1, MetaData.HasNext, "Next"));
    }
    private async Task OnSelectedPage(PageLink link)
    {
        if(link.Page == MetaData.CurrentPage || !link.Enabled)
        {
            return;
        }
        MetaData.CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }
}
